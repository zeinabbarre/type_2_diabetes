****Fst_Values Tables****

CREATE TABLE Fst_Values (
    fst_id INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique ID for each Fst entry
    snp_id INTEGER,                            -- Foreign key linking to SNPs table
    chromosome TEXT NOT NULL,                  -- Chromosome number (TEXT to match SNPs table)
    position INTEGER NOT NULL,                 -- Genomic position of the SNP
    fst_value REAL NOT NULL,                   -- Fst statistic value
    population_1 TEXT NOT NULL,                -- First population in comparison
    population_2 TEXT NOT NULL,                -- Second population in comparison
    FOREIGN KEY (snp_id) REFERENCES SNPs(snp_id) ON DELETE SET NULL
);


****POPULATE FST TABLE******
import sqlite3
import pandas as pd

# File paths
db_path = "/Users/yasminahmed/Desktop/type_2_diabetes/instance/db.db"
csv_path = "/Users/yasminahmed/Desktop/type_2_diabetes/csv_files/fst_values_cleaned.csv"

# Load the cleaned CSV
df = pd.read_csv(csv_path)

# Connect to SQLite
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Insert data while ensuring no NULL values are inserted
for index, row in df.iterrows():
    cursor.execute("""
        INSERT INTO Fst_Values (chromosome, position, fst_value, population_1, population_2)
        VALUES (?, ?, ?, ?, ?)
    """, (row["CHROM"], row["POS"], row["WEIR_AND_COCKERHAM_FST"], row["population_1"], row["population_2"]))

# Commit changes and close
conn.commit()
conn.close()

print("‚úÖ Data inserted successfully!")


****QUERY DATA*****
import sqlite3
import pandas as pd

# Define database path
DB_PATH = "/Users/yasminahmed/Desktop/type_2_diabetes/instance/db.db"

# Function to fetch Fst values
def get_fst_values(chromosome, start_pos, end_pos):
    """Fetch Fst values for a specific genomic region from the Fst_Values table."""
    
    # Connect to the SQLite database
    conn = sqlite3.connect(DB_PATH)
    
    # SQL query to fetch Fst values
    query = '''
    SELECT position, fst_value, population_1, population_2
    FROM Fst_Values
    WHERE chromosome = ?
    AND position BETWEEN ? AND ?
    ORDER BY position;
    '''
    
    try:
        # Execute the query and return results as a DataFrame
        df = pd.read_sql_query(query, conn, params=(chromosome, start_pos, end_pos))
        
    except Exception as e:
        print(f"‚ùå SQL Error: {e}")
        df = pd.DataFrame()  # Return an empty DataFrame if there's an error
    
    finally:
        conn.close()  # Ensure the connection is properly closed

    return df  # ‚úÖ Returns a DataFrame with Fst values

# Example: Fetch Fst values for Chromosome 3 between positions 22,226,594 and 52,640,651
fst_results = get_fst_values(3, 22226594, 52640651)

# Print results
print("üîπ Fst Values Results:")
print(fst_results)


