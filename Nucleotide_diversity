***NUCLEOTIDE_DIVERSITY***

CREATE TABLE Nucleotide_Diversity (
    diversity_id INTEGER PRIMARY KEY AUTOINCREMENT, 
    chromosome TEXT NOT NULL,     -- Chromosome number (1, 2, ... X)
    bin_start INTEGER NOT NULL,   -- Start of genomic bin
    bin_end INTEGER NOT NULL,     -- End of genomic bin
    n_variants INTEGER NOT NULL,  -- Number of variants in the bin
    pi_value REAL NOT NULL,       -- Nucleotide Diversity (Pi)
    population TEXT NOT NULL      -- Bengali or Punjabi
);

***POPULATE TABLE***

import sqlite3
import pandas as pd

# Paths
db_path = "/Users/yasminahmed/Desktop/type_2_diabetes/instance/db.db"  # Update path if needed
bengali_file = "/Users/yasminahmed/Desktop/type_2_diabetes/csv_files/sorted_nucleotide_diversity_beb.pi"
punjabi_file = "/Users/yasminahmed/Desktop/type_2_diabetes/csv_files/sorted_nucleotide_diversity_pjl.pi"

# Connect to SQLite database
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Function to load and insert data
def insert_nucleotide_diversity(file_path, population):
    # Load CSV file
    df = pd.read_csv(file_path, delim_whitespace=True)

    # Check if columns are correct
    expected_columns = {"CHROM", "BIN_START", "BIN_END", "N_VARIANTS", "PI"}
    if not expected_columns.issubset(df.columns):
        raise ValueError(f"CSV file {file_path} is missing required columns: {expected_columns - set(df.columns)}")

    # Convert CHROM to string to match database format
    df["CHROM"] = df["CHROM"].astype(str)

    # Match SNP IDs from the SNPs table (linking nucleotide diversity data to SNPs)
    snp_mapping = pd.read_sql_query("SELECT snp_id, chr_id, chr_pos FROM SNPs", conn)

    # Merge to get SNP IDs
    merged_df = df.merge(
        snp_mapping, 
        how="left", 
        left_on=["CHROM", "BIN_START"], 
        right_on=["chr_id", "chr_pos"]
    )

    # Insert into Nucleotide_Diversity table
    for _, row in merged_df.iterrows():
        cursor.execute("""
            INSERT INTO Nucleotide_Diversity (snp_id, chr_id, bin_start, bin_end, population, pi)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (row["snp_id"], row["CHROM"], row["BIN_START"], row["BIN_END"], population, row["PI"]))

    conn.commit()
    print(f"âœ… Successfully inserted {len(merged_df)} rows for {population}")

# Insert Bengali and Punjabi data
insert_nucleotide_diversity(bengali_file, "Bengali")
insert_nucleotide_diversity(punjabi_file, "Punjabi")

# Close connection
cursor.close()
conn.close()
print("âœ… Nucleotide Diversity data successfully populated!")


****ONLY A SECTION FOR WEB APP TO LINK SNP TO NUCLEOTIDE DIVERSITY****

import sqlite3
import pandas as pd

def get_nucleotide_diversity(chromosome, start_pos, end_pos, population):
    """ Fetch nucleotide diversity for a given chromosome region and population """
    
    # Connect to database
    conn = sqlite3.connect("/Users/yasminahmed/Desktop/type_2_diabetes/instance/db.db")
    cursor = conn.cursor()

    query = '''
    SELECT s.snp_id, s.chr_id, s.chr_pos, s.snp_name, s.gene_id,
           nd.bin_start, nd.bin_end, nd.pi, nd.population
    FROM SNPs AS s
    LEFT JOIN Nucleotide_Diversity AS nd
    ON s.chr_id = nd.chr_id  
    AND s.chr_pos BETWEEN nd.bin_start AND nd.bin_end  
    WHERE s.chr_id = ?  
    AND s.chr_pos BETWEEN ? AND ?
    AND nd.population = ?;
    '''
   
    cursor.execute(query, (chromosome, start_pos, end_pos, population))
    result = cursor.fetchall()
   
    conn.close()
    return result

# Example Queries for Bengali and Punjabi populations
bengali_result = get_nucleotide_diversity(3, 22226594, 52640651, "Bengali")
punjabi_result = get_nucleotide_diversity(3, 22226594, 52640651, "Punjabi")

# Print Results
print("ðŸ”¹ Bengali Population Nucleotide Diversity Results:")
print(bengali_result)

print("\nðŸ”¹ Punjabi Population Nucleotide Diversity Results:")
print(punjabi_result)


