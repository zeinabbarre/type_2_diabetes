### making tables ### 

CREATE TABLE tajimas_PJL (
    chromosome INTEGER,
    bin_start INTEGER,
    n_snps INTEGER,
    tajimas_d REAL
);

CREATE TABLE tajimas_BEB (
    chromosome INTEGER,
    bin_start INTEGER,
    n_snps INTEGER,
    tajimas_d REAL
);

#### populating tables BEB ####

import pandas as pd
import sqlite3


# File paths
csv_file_path = "/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/csv_files/combined_TajimaD_sorted_BEB.csv"
db_path = "/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/instance/db.db"


# Load CSV file
df = pd.read_csv(csv_file_path)


# Connect to SQLite database
conn = sqlite3.connect(db_path)
cursor = conn.cursor()


# Loop through each row in the DataFrame and insert data into the tajimas_BEB table
for index, row in df.iterrows():
    # Extract relevant values from the row
    chrom = row['CHROM']
    bin_start = row['BIN_START']
    n_snps = row['N_SNPS']
    tajima_d = row['TajimaD']


    # Insert the row data into the tajimas_BEB table
    cursor.execute("""
        INSERT INTO tajimas_BEB (chromosome, bin_start, n_snps, tajimas_d)
        VALUES (?, ?, ?, ?);
    """, (chrom, bin_start, n_snps, tajima_d))


# Commit the changes to the database
conn.commit()


# Close the connection
cursor.close()
conn.close()


print("TajimasD results successfully inserted into the tajimas_BEB table!")



##### POPULATING pjl ###
import sqlite3
import pandas as pd

# Connect to SQLite
db_path = "/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/instance/db.db"

conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Load Tajima's D file
tajima_df = pd.read_csv("/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/csv_files/filtered_merged_tajimasD_all_chromosomes.csv")

# Ensure column names match the `tajimas_PJL` table
tajima_df.columns = ["chromosome", "bin_start", "n_snps", "tajimas_d"]  # Adjust if needed

# Option 1: Drop rows where 'tajimas_d' is NaN
# tajima_df = tajima_df.dropna(subset=["tajimas_d"])

# Option 2: Fill NaN values with 0 (or another default value)
tajima_df["tajimas_d"].fillna(0, inplace=True)  # Replace NaN with 0

# Save to SQLite
tajima_df.to_sql("tajimas_PJL", conn, if_exists="append", index=False)  # ✅ Append to existing table

print("✅ Tajima's D data imported successfully into tajimas_PJL!")
conn.close()

