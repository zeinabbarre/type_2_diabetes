CREATE TABLE Nucleotide_Diversity (
    diversity_id INTEGER PRIMARY KEY AUTOINCREMENT,
    chromosome TEXT NOT NULL,     -- Chromosome number (1, 2, ... X)
    bin_start INTEGER NOT NULL,   -- Start of genomic bin
    bin_end INTEGER NOT NULL,     -- End of genomic bin
    n_variants INTEGER NOT NULL,  -- Number of variants in the bin
    pi_value REAL NOT NULL,       -- Nucleotide Diversity (Pi)
    population TEXT NOT NULL      -- Bengali or Punjabi
);


#### populating the tables ####

import sqlite3
import pandas as pd

# Paths
db_path = "/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/instance/db.db"
bengali_file = "/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/csv_files/genetic_diversity.beb.csv"
punjabi_file = "/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/csv_files/genetic_diversity.pjl.csv"

# Connect to SQLite database
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Function to load and insert data
def insert_nucleotide_diversity(file_path, population):
    df = pd.read_csv(file_path, sep=",")  # Changed to correct delimiter

    # Ensure correct columns
    expected_columns = {"CHROM", "BIN_START", "BIN_END", "N_VARIANTS", "PI"}
    if not expected_columns.issubset(df.columns):
        raise ValueError(f"CSV file {file_path} is missing required columns: {expected_columns - set(df.columns)}")

    # Convert CHROM to string
    df["CHROM"] = df["CHROM"].astype(str)

    # Insert into Nucleotide_Diversity table
    for _, row in df.iterrows():
        cursor.execute("""
            INSERT INTO Nucleotide_Diversity (chromosome, bin_start, bin_end, n_variants, pi_value, population)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (row["CHROM"], row["BIN_START"], row["BIN_END"], row["N_VARIANTS"], row["PI"], population))

    conn.commit()
    print(f"✅ Successfully inserted {len(df)} rows for {population}")

# Insert data
insert_nucleotide_diversity(bengali_file, "Bengali")
insert_nucleotide_diversity(punjabi_file, "Punjabi")

# Close connection
conn.close()



#### web code ####

from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, send_file
import sqlite3
import re
import pandas as pd
import matplotlib
matplotlib.use('Agg')  # ✅ Force non-GUI backend before importing pyplot
import matplotlib.pyplot as plt
import io
import os
import numpy as np 

app = Flask(__name__, static_folder='static', static_url_path='/static')
app.secret_key = 'supersecretkey'  # Needed for flashed messages
DB_PATH = "/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/instance/db.db"

# ✅ Function to Establish Database Connection
def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row  # Enables dictionary-like access
    return conn

@app.route('/')
def index():
    """Renders the homepage."""
    return render_template('index.html')

# ✅ SEARCH FUNCTIONALITY (SNP, Gene, Genomic Coordinates)
@app.route('/search_snp', methods=['POST'])
def search_snp():
    """Handles search for SNPs, genes, or genomic coordinates."""
    query = request.form['search_query'].strip()
    conn = get_db_connection()

    # 🔹 Search by SNP Name
    snp = conn.execute("""
        SELECT snp_name, chr_id, chr_pos
        FROM SNPs
        WHERE LOWER(snp_name) = LOWER(?)
    """, (query,)).fetchone()

    if snp:
        conn.close()
        return redirect(url_for('snp_details', snp_name=snp['snp_name']))

    # 🔹 Search by Gene Name
    gene = conn.execute("SELECT * FROM Genes WHERE LOWER(gene_name) = LOWER(?)", (query,)).fetchone()
    
    if gene:
        snps = conn.execute("""
            SELECT s.snp_id, s.snp_name, s.chr_id, s.chr_pos
            FROM SNPs s
            JOIN SNP_Gene sg ON s.snp_id = sg.snp_id
            WHERE sg.gene_id = ?
        """, (gene['gene_id'],)).fetchall()

        #Fetch distinct populations from Populations table
        populations = conn.execute("""
        SELECT DISTINCT region FROM Populations
    """).fetchall()
        populations = [pop['region'] for pop in populations]

        conn.close()
        return render_template('filtered_snps.html', snps=snps, populations=populations, query=query)
    

    # 🔹 Search by Genomic Coordinates
    match = re.match(r"^(\d+):(\d+)-(\d+)$", query)
    if match:
        chromosome, start_pos, end_pos = match.groups()
        start_pos, end_pos = int(start_pos), int(end_pos)

        # ✅ Fetch SNPs in the given genomic region
        snps = conn.execute("""
            SELECT snp_id, snp_name, chr_id, chr_pos
            FROM SNPs 
            WHERE chr_id = ? AND chr_pos BETWEEN ? AND ?
        """, (chromosome, start_pos, end_pos)).fetchall()

        # ✅ Fetch all unique population regions from the Populations table
        populations = conn.execute("""
            SELECT DISTINCT region FROM Populations
        """).fetchall()
        populations = [pop["region"] for pop in populations]

        conn.close()

        if snps:
            return render_template('filtered_snps.html', snps=snps, populations=populations, query=query)

        flash("No SNPs found in the specified region.", "error")
        return redirect(url_for('index'))

    # 🔹 No results found
    flash("No results found.", "error")
    conn.close()
    return redirect(url_for('index'))




# ✅ SNP DETAILS PAGE
@app.route('/snp/<snp_name>')
def snp_details(snp_name):
    """Displays detailed SNP information along with mapped genes and populations (without Population column and duplicates)."""
    conn = get_db_connection()

    # 🔹 Fetch SNP details
    snp = conn.execute("""
        SELECT * FROM SNPs WHERE snp_name = ?
    """, (snp_name,)).fetchone()

    # 🔹 If SNP is not in the SNPs table, check if it exists in Populations
    if not snp:
        pop_snp = conn.execute("""
            SELECT DISTINCT snp_id FROM Populations WHERE snp_id = (
                SELECT snp_id FROM SNPs WHERE snp_name = ?
            )
        """, (snp_name,)).fetchone()

        if pop_snp:
            snp = {"snp_name": snp_name, "chr_id": "Unknown", "chr_pos": "Unknown", "snp_id": pop_snp["snp_id"]}
        else:
            conn.close()
            flash(f"SNP '{snp_name}' not found.", "error")
            return redirect(url_for('index'))

    # 🔹 Get mapped genes (only if SNP is in `SNPs`)
    mapped_genes = []
    if isinstance(snp, sqlite3.Row) and "snp_id" in snp.keys():
        mapped_genes = conn.execute("""
            SELECT g.gene_name 
            FROM SNP_Gene sg
            INNER JOIN Genes g ON sg.gene_id = g.gene_id
            WHERE sg.snp_id = ?
        """, (snp["snp_id"],)).fetchall()

    # 🔹 Get population data (without Population column) and remove duplicates
    populations = conn.execute("""
        SELECT DISTINCT p_value, sample_size 
        FROM Populations WHERE snp_id = ?
    """, (snp["snp_id"],)).fetchall()

    conn.close()
    return render_template('snp_details.html', snp=snp, mapped_genes=mapped_genes, populations=populations)


@app.route('/filter_by_population', methods=['POST'])
def filter_by_population():
    """Filters SNPs by population and displays results. Computes summary stats for South Asian population."""
    population = request.form.get('population')
    snp_ids = request.form.get('snp_ids')

    if not population or not snp_ids:
        flash("Invalid selection. Please choose a population.", "error")
        return redirect(url_for('index'))

    conn = get_db_connection()
    snp_ids_list = snp_ids.split(',')

    print("🚀 Processing Population:", population)
    print("📌 SNP IDs Received:", snp_ids_list)

    # ✅ Query SNPs for the selected population
    placeholders = ','.join(['?'] * len(snp_ids_list))
    query = f"""
        SELECT s.snp_name, s.chr_id, s.chr_pos, p.p_value, p.sample_size, s.snp_id
        FROM SNPs s
        JOIN Populations p ON s.snp_id = p.snp_id
        WHERE p.region = ? AND s.snp_id IN ({placeholders})
    """

    params = [population] + snp_ids_list
    snps = conn.execute(query, params).fetchall()

    print(f"📊 Retrieved {len(snps)} SNPs")  # Debugging print

    # ✅ Fetch mapped genes for each SNP
    mapped_genes = {}
    for snp in snps:
        genes = conn.execute("""
            SELECT g.gene_name 
            FROM SNP_Gene sg
            JOIN Genes g ON sg.gene_id = g.gene_id
            WHERE sg.snp_id = ?
        """, (snp["snp_id"],)).fetchall()
        mapped_genes[snp["snp_name"]] = [gene["gene_name"] for gene in genes]

    # ✅ Count unique SNP names
    unique_snp_names = set(snp["snp_name"] for snp in snps)

    summary_stats = None
    tajima_plot_url = None
    download_url = None

    # ✅ Always Compute Summary Stats & Plot for South Asian Population
    if population.lower() == "south asian" and snps:
        stats_query = """SELECT tajimas_d FROM tajimas_BEB"""
        result = conn.execute(stats_query).fetchall()

        # ✅ Extract values and remove None
        tajima_values = [row["tajimas_d"] for row in result if row["tajimas_d"] is not None]

        if tajima_values:
            summary_stats = {
                "min_tajimas_d": min(tajima_values),
                "max_tajimas_d": max(tajima_values),
                "avg_tajimas_d": np.mean(tajima_values),
                "median_tajimas_d": np.median(tajima_values),
                "std_tajimas_d": np.std(tajima_values)
            }

            print("✅ Summary Statistics Computed:", summary_stats)  # Debugging print

            # ✅ Save summary statistics as a text file
            static_dir = os.path.join(os.getcwd(), "static")
            os.makedirs(static_dir, exist_ok=True)

            summary_file_path = os.path.join(static_dir, "summary_statistics.txt")
            with open(summary_file_path, "w") as f:
                f.write("Tajima's D Summary Statistics\n")
                for key, value in summary_stats.items():
                    f.write(f"{key.replace('_', ' ').title()}: {value:.3f}\n")

            download_url = url_for("download_summary")

            # ✅ Generate Tajima’s D plot only for South Asian SNPs
            if snps:
                chromosome = snps[0]["chr_id"]
                start_pos = min([snp["chr_pos"] for snp in snps])
                end_pos = max([snp["chr_pos"] for snp in snps])

                tajima_plot_url = url_for('tajimas_image', chromosome=chromosome, start=start_pos, end=end_pos)

    conn.close()

    return render_template(
        'population_snps.html',
        snps=snps,
        region=population,
        unique_snp_count=len(unique_snp_names),
        mapped_genes=mapped_genes,
        summary_stats=summary_stats,  # ✅ Always passed
        tajima_plot_url=tajima_plot_url,  # ✅ Always passed
        download_url=download_url  # ✅ Always passed
    )


@app.route("/download_summary")
def download_summary():
    """Allows users to download summary statistics as a text file."""
    static_dir = os.path.join(os.getcwd(), "static")  # Ensure we're using the right directory
    summary_file_path = os.path.join(static_dir, "summary_statistics.txt")

    # ✅ Check if the file actually exists before sending it
    if not os.path.exists(summary_file_path):
        print(f"❌ ERROR: File not found at {summary_file_path}")
        return "Error: Summary statistics file not found", 404

    print(f"✅ Sending file: {summary_file_path}")
    return send_file(summary_file_path, as_attachment=True, download_name="summary_statistics.txt")



# Function to fetch Tajima's D values
def get_tajimas(chromosome, start_pos, end_pos, table_name):
    """Fetch Tajima's D values for a specific region from the given SQL table."""
    conn = sqlite3.connect(DB_PATH)  # Use the correct database path
    query = f'''
    SELECT bin_start, tajimas_d
    FROM {table_name}
    WHERE chromosome = ?
    AND bin_start BETWEEN ? AND ?
    ORDER BY bin_start;
    '''
    
    try:
        df = pd.read_sql_query(query, conn, params=(chromosome, start_pos, end_pos))
    except Exception as e:
        print(f"❌ SQL Error while querying {table_name}: {e}")
        df = pd.DataFrame()  # Return an empty DataFrame if there's an error
    finally:
        conn.close()  # Ensure the connection is properly closed

    return df  # ✅ Now it actually returns the DataFrame


@app.route('/tajimas_image')
def tajimas_image():
    """Generates and serves separate Tajima's D plot images for both Punjabi and Bengali populations."""
    chrom = request.args.get('chromosome', type=int)
    start_pos = request.args.get('start', type=int)
    end_pos = request.args.get('end', type=int)

    if not chrom or not start_pos or not end_pos:
        return jsonify({"error": "Missing parameters"}), 400

    # Generate the separate Tajima’s D plot
    img = plot_tajimas_separate(chrom, start_pos, end_pos)

    # Serve the generated image
    return send_file(img, mimetype='image/png')



# Function to Generate the Tajima's D Plot (Helper Function)
def plot_tajimas_separate(chromosome, start_pos, end_pos):
    """Generate and return separate Tajima's D plots for Punjabi (PJL) and Bengali (BEB) populations."""

    # Fetch data for both populations
    df_pjl = get_tajimas(chromosome, start_pos, end_pos, "tajimas_pjl")
    df_beb = get_tajimas(chromosome, start_pos, end_pos, "tajimas_BEB")

    # Create the figure and axes
    fig, axes = plt.subplots(2, 1, figsize=(10, 10))  # Create two subplots vertically

    # Plot for Punjabi (PJL)
    if not df_pjl.empty:
        axes[0].plot(df_pjl["bin_start"], df_pjl["tajimas_d"], marker="o", linestyle="-", color="blue", label="Punjabi (Lahore)")
        axes[0].axhline(y=0, color="black", linestyle="--", label="Neutral Selection")
        axes[0].set_title(f"Tajima's D for Punjabi (PJL) - Chromosome {chromosome} ({start_pos}-{end_pos})")
        axes[0].set_xlabel("Genomic Position (bp)")
        axes[0].set_ylabel("Tajima's D")
        axes[0].legend()

    # Plot for Bengali (BEB)
    if not df_beb.empty:
        axes[1].plot(df_beb["bin_start"], df_beb["tajimas_d"], marker="s", linestyle="--", color="red", label="Bengali (Bangladesh)")
        axes[1].axhline(y=0, color="black", linestyle="--", label="Neutral Selection")
        axes[1].set_title(f"Tajima's D for Bengali (BEB) - Chromosome {chromosome} ({start_pos}-{end_pos})")
        axes[1].set_xlabel("Genomic Position (bp)")
        axes[1].set_ylabel("Tajima's D")
        axes[1].legend()

    # Save the image to a BytesIO object and return it
    img = io.BytesIO()
    plt.tight_layout()  # Adjust layout to prevent overlap
    plt.savefig(img, format='png')
    plt.close()  # Close the plot to avoid display issues
    img.seek(0)

    return img


@app.route('/gene/<gene_name>')
def gene_ontology(gene_name):
    """Displays ontology terms and pathway data for a given gene using the new Ontology table."""
    conn = get_db_connection()

    # ✅ Get gene details, including gene_id
    gene = conn.execute("SELECT * FROM Genes WHERE gene_name = ?", (gene_name,)).fetchone()
    if not gene:
        conn.close()
        flash(f"Gene '{gene_name}' not found.", "error")
        return redirect(url_for('index'))

    # ✅ Fetch ontology data from the new Ontology table
    ontology = conn.execute("""
        SELECT gene_stable_id, description, gene_type, 
               molecular_function, biological_process, cellular_component, pathway
        FROM Ontology
        WHERE gene_id = ?
    """, (gene['gene_id'],)).fetchone()

    conn.close()

    # ✅ Handle missing ontology data
    if not ontology:
        flash(f"No ontology data found for gene '{gene_name}'.", "warning")
        return render_template('gene_ontology.html', gene_name=gene_name, ontology_data={}, gene_info={})

    # ✅ Organize ontology data: Split terms so they appear on separate lines
    ontology_data = {
        "Molecular Function": ontology['molecular_function'].split('; ') if ontology['molecular_function'] else [],
        "Biological Process": ontology['biological_process'].split('; ') if ontology['biological_process'] else [],
        "Cellular Component": ontology['cellular_component'].split('; ') if ontology['cellular_component'] else []
    }

    # ✅ Process Pathways (Handle None Values)
    pathway_list = ontology['pathway'].split('; ') if ontology['pathway'] else []

    # ✅ Additional gene information (Now includes pathways)
    gene_info = {
        "Stable ID": ontology['gene_stable_id'],
        "Description": ontology['description'],
        "Gene Type": ontology['gene_type'],
        "Pathways": pathway_list if pathway_list else ["No pathway data available."]
    }

    return render_template('gene_ontology.html', gene_name=gene_name, ontology_data=ontology_data, gene_info=gene_info)



if __name__ == '__main__':
    app.run(debug=True)



#### HTML code ####


<!DOCTYPE html> 
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>SNPs for Population: {{ region }}</title>
<link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">

<style>
/* ✅ General Page Styling */
body {
    margin: 0;
    padding: 0;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed;
}

/* ✅ Tiny Reduction */
.container {
    max-width: 76%;
    width: 76%;
    margin: 26px auto;
    text-align: center;
    padding: 17px;
    border-radius: 10px;
    background: none;
    box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.1);
}

/* ✅ SNP Table */
.snp-table-container {
    width: 95%;
    margin-top: 30px;
    padding: 20px;
    background: white;
    border-radius: 10px;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

/* ✅ Table Styling */
.table-container {
    max-height: 500px;
    overflow-y: auto;
    border: 1px solid #ccc;
    margin-top: 20px;
}

th {
    background-color: var(--table-header-color, #cf3847);
    color: white;
    padding: 12px;
    position: sticky;
    top: 0;
    z-index: 2;
}

th, td {
    padding: 12px;
    border: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f2f2f2;
}

/* ✅ Buttons */
.download-button, .back-button {
    display: block;
    padding: 12px 20px;
    margin: 30px auto;
    font-size: 16px;
    border-radius: 5px;
    background-color: #007BFF;
    color: white;
    text-decoration: none;
    width: fit-content;
}

.download-button:hover, .back-button:hover {
    background-color: #0056b3;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
    let population = "{{ region }}";  
    let backgroundImage = "/static/images/unknown.png"; 
    let tableHeaderColor = "#cf3847"; 

    const populationStyles = {
        "African": { "background": "/static/images/africa.png", "headerColor": "#8B0000" },
        "American": { "background": "/static/images/america.png", "headerColor": "#003366" },
        "African American": { "background": "/static/images/america.png", "headerColor": "#003366" },
        "General Asia": { "background": "/static/images/general_asia.png", "headerColor": "#808080" },
        "Indigenous Australian": { "background": "/static/images/australia.png", "headerColor": "#DAA520" },
        "East Asian": { "background": "/static/images/east_asia.png", "headerColor": "#E07B3D" },
        "Middle Eastern": { "background": "/static/images/middle_east.png", "headerColor": "#A0522D" },
        "Unknown": { "background": "/static/images/unknown.png", "headerColor": "#B53A3A" },
        "South Asian": { "background":"/static/images/south_asia.png", "headerColor": "#8A9C8F" },
        "European": { "background":"/static/images/europe.png", "headerColor": "#F6D7B0" }
    };

    if (populationStyles[population]) {
        backgroundImage = populationStyles[population].background;
        tableHeaderColor = populationStyles[population].headerColor;
    }

    document.body.style.backgroundImage = `url('${backgroundImage}')`;
    document.body.style.backgroundSize = "cover";
    document.body.style.backgroundPosition = "center";
    document.body.style.backgroundRepeat = "no-repeat";
    document.body.style.backgroundAttachment = "fixed";

    document.documentElement.style.setProperty('--table-header-color', tableHeaderColor);
});
</script>

</head>
<body>

<div class="container">
    <h1>SNPs for Population: {{ region }}</h1>

    <p><strong>Showing {{ unique_snp_count }} Unique SNPs</strong> in <strong>{{ region }}</strong>.</p>

    <!-- 1️⃣ SNP Table (Now Appears First) -->
    <div class="snp-table-container">
        <h2>SNP Details</h2>
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>SNP Name</th>
                        <th>Chromosome</th>
                        <th>Position</th>
                        <th>P-Value</th>
                        <th>Sample Size</th>
                        <th>Mapped Genes</th>
                    </tr>
                </thead>
                <tbody>
                    {% for snp in snps %}
                        <tr>
                            <td>{{ snp.snp_name }}</td>
                            <td>{{ snp.chr_id }}</td>
                            <td>{{ snp.chr_pos }}</td>
                            <td>{{ snp.p_value if snp.p_value else 'N/A' }}</td>
                            <td>{{ snp.sample_size if snp.sample_size else 'N/A' }}</td>
                            <td>
                                {% if mapped_genes[snp.snp_name] %}
                                    <select onchange="window.location.href=this.value">
                                        <option value="">-- Select Gene --</option>
                                        {% for gene in mapped_genes[snp.snp_name] %}
                                            <option value="{{ url_for('gene_ontology', gene_name=gene) }}">{{ gene }}</option>
                                        {% endfor %}
                                    </select>
                                {% else %}
                                    No mapped genes
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <!-- 2️⃣ Summary Statistics (Now Below SNP Table) -->
    {% if region.lower() == "south asian" and summary_stats %}
        <div class="tajima-container">
            <h2>Tajima's D Summary Statistics</h2>
            <table>
                <tr><td><strong>Min:</strong></td><td>{{ summary_stats["min_tajimas_d"] }}</td></tr>
                <tr><td><strong>Max:</strong></td><td>{{ summary_stats["max_tajimas_d"] }}</td></tr>
                <tr><td><strong>Mean:</strong></td><td>{{ summary_stats["avg_tajimas_d"] }}</td></tr>
                <tr><td><strong>Median:</strong></td><td>{{ summary_stats["median_tajimas_d"] }}</td></tr>
                <tr><td><strong>Std Dev:</strong></td><td>{{ summary_stats["std_tajimas_d"] }}</td></tr>
            </table>
        </div>

        <!-- 3️⃣ Tajima's D Plot (Now After Summary Statistics) -->
        <div class="tajima-container">
            <h2>Tajima's D Plot</h2>
            <img src="{{ tajima_plot_url }}" alt="Tajima's D Plot">
        </div>
    {% endif %}

    <!-- 4️⃣ Nucleotide Diversity Plot -->
    {% if nucleotide_plot_url %}
        <div class="tajima-container">
            <h2>Nucleotide Diversity Plot</h2>
            <img src="{{ nucleotide_plot_url }}" alt="Nucleotide Diversity Plot">
        </div>
    {% endif %}

    <!-- ✅ Buttons Stay in the Same Position -->
    {% if download_url %}
        <a href="{{ download_url }}" class="download-button">Download Summary Statistics</a>
    {% endif %}

    <a href="{{ url_for('index') }}" class="back-button">Back to Search</a>
</div>

</body>
</html>

