CREATE TABLE Nucleotide_Diversity (
    diversity_id INTEGER PRIMARY KEY AUTOINCREMENT,
    chromosome TEXT NOT NULL,     -- Chromosome number (1, 2, ... X)
    bin_start INTEGER NOT NULL,   -- Start of genomic bin
    bin_end INTEGER NOT NULL,     -- End of genomic bin
    n_variants INTEGER NOT NULL,  -- Number of variants in the bin
    pi_value REAL NOT NULL,       -- Nucleotide Diversity (Pi)
    population TEXT NOT NULL      -- Bengali or Punjabi
);


#### populating the tables ####
import sqlite3
import pandas as pd

# Paths
db_path = "/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/instance/db.db"
bengali_file = "/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/csv_files/genetic_diversity.beb.csv"
punjabi_file = "/mnt/c/Users/Hp EliteBook 840 G3/OneDrive/Desktop/type_2_diabetes/csv_files/genetic_diversity.pjl.csv"

# Connect to SQLite database
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Function to load and insert data
def insert_nucleotide_diversity(file_path, population):
    df = pd.read_csv(file_path, sep=",")  # Changed to correct delimiter

    # Ensure correct columns
    expected_columns = {"CHROM", "BIN_START", "BIN_END", "N_VARIANTS", "PI"}
    if not expected_columns.issubset(df.columns):
        raise ValueError(f"CSV file {file_path} is missing required columns: {expected_columns - set(df.columns)}")

    # Convert CHROM to string
    df["CHROM"] = df["CHROM"].astype(str)

    # Insert into Nucleotide_Diversity table
    for _, row in df.iterrows():
        cursor.execute("""
            INSERT INTO Nucleotide_Diversity (chromosome, bin_start, bin_end, n_variants, pi_value, population)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (row["CHROM"], row["BIN_START"], row["BIN_END"], row["N_VARIANTS"], row["PI"], population))

    conn.commit()
    print(f"✅ Successfully inserted {len(df)} rows for {population}")

# Insert data
insert_nucleotide_diversity(bengali_file, "Bengali")
insert_nucleotide_diversity(punjabi_file, "Punjabi")

# Close connection
conn.close()



### app code ###

@app.route('/nucleotide_diversity_image')
def nucleotide_diversity_image():
    """Generates and serves the Nucleotide Diversity plot for Punjabi and Bengali populations."""
    # Generate the Nucleotide Diversity plot
    img = plot_nucleotide_diversity()

    # Serve the generated image
    return send_file(img, mimetype='image/png')



def plot_nucleotide_diversity():
    """Generates and returns a Nucleotide Diversity plot for Punjabi and Bengali populations."""
    # Connect to the SQLite database
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # Query data for Punjabi population
    cursor.execute("SELECT bin_start, bin_end, pi_value FROM Nucleotide_Diversity WHERE population='Punjabi'")
    punjabi_data = cursor.fetchall()

    # Query data for Bengali population
    cursor.execute("SELECT bin_start, bin_end, pi_value FROM Nucleotide_Diversity WHERE population='Bengali'")
    bengali_data = cursor.fetchall()

    # Close the database connection
    conn.close()

    # Prepare the data for plotting
    punjabi_bin_start = [row[0] for row in punjabi_data]
    punjabi_bin_end = [row[1] for row in punjabi_data]
    punjabi_pi_value = [row[2] for row in punjabi_data]

    bengali_bin_start = [row[0] for row in bengali_data]
    bengali_bin_end = [row[1] for row in bengali_data]
    bengali_pi_value = [row[2] for row in bengali_data]

    # Create the figure and axes for the plot
    plt.figure(figsize=(14, 7))

    # Punjabi scatter plot
    plt.subplot(1, 2, 1)
    plt.scatter(punjabi_bin_start, punjabi_pi_value, color='blue', label='Punjabi', alpha=0.7)
    plt.scatter(punjabi_bin_end, punjabi_pi_value, color='blue', alpha=0.7)
    plt.title('Nucleotide Diversity (Pi) for Punjabi Population')
    plt.xlabel('Genomic Bin Start/End')
    plt.ylabel('Nucleotide Diversity (Pi)')
    plt.grid(True)
    plt.legend()

    # Bengali scatter plot
    plt.subplot(1, 2, 2)
    plt.scatter(bengali_bin_start, bengali_pi_value, color='green', label='Bengali', alpha=0.7)
    plt.scatter(bengali_bin_end, bengali_pi_value, color='green', alpha=0.7)
    plt.title('Nucleotide Diversity (Pi) for Bengali Population')
    plt.xlabel('Genomic Bin Start/End')
    plt.ylabel('Nucleotide Diversity (Pi)')
    plt.grid(True)
    plt.legend()

    # Save the plot to a BytesIO object
    img = io.BytesIO()
    plt.tight_layout()  # Adjust layout to prevent overlap
    plt.savefig(img, format='png')
    plt.close()  # Close the plot to avoid display issues
    img.seek(0)

    return img


#### HTML code populations_snp.html####


<!DOCTYPE html> 
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>SNPs for Population: {{ region }}</title>
<link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">

<style>
/* ✅ General Page Styling */
body {
    margin: 0;
    padding: 0;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed;
}

/* ✅ Tiny Reduction */
.container {
    max-width: 76%;
    width: 76%;
    margin: 26px auto;
    text-align: center;
    padding: 17px;
    border-radius: 10px;
    background: none;
    box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.1);
}

/* ✅ SNP Table */
.snp-table-container {
    width: 95%;
    margin-top: 30px;
    padding: 20px;
    background: white;
    border-radius: 10px;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

/* ✅ Table Styling */
.table-container {
    max-height: 500px;
    overflow-y: auto;
    border: 1px solid #ccc;
    margin-top: 20px;
}

th {
    background-color: var(--table-header-color, #cf3847);
    color: white;
    padding: 12px;
    position: sticky;
    top: 0;
    z-index: 2;
}

th, td {
    padding: 12px;
    border: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f2f2f2;
}

/* ✅ Buttons */
.download-button, .back-button {
    display: block;
    padding: 12px 20px;
    margin: 30px auto;
    font-size: 16px;
    border-radius: 5px;
    background-color: #007BFF;
    color: white;
    text-decoration: none;
    width: fit-content;
}

.download-button:hover, .back-button:hover {
    background-color: #0056b3;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
    let population = "{{ region }}";  
    let backgroundImage = "/static/images/unknown.png"; 
    let tableHeaderColor = "#cf3847"; 

    const populationStyles = {
        "African": { "background": "/static/images/africa.png", "headerColor": "#8B0000" },
        "American": { "background": "/static/images/america.png", "headerColor": "#003366" },
        "African American": { "background": "/static/images/america.png", "headerColor": "#003366" },
        "General Asia": { "background": "/static/images/general_asia.png", "headerColor": "#808080" },
        "Indigenous Australian": { "background": "/static/images/australia.png", "headerColor": "#DAA520" },
        "East Asian": { "background": "/static/images/east_asia.png", "headerColor": "#E07B3D" },
        "Middle Eastern": { "background": "/static/images/middle_east.png", "headerColor": "#A0522D" },
        "Unknown": { "background": "/static/images/unknown.png", "headerColor": "#B53A3A" },
        "South Asian": { "background":"/static/images/south_asia.png", "headerColor": "#8A9C8F" },
        "European": { "background":"/static/images/europe.png", "headerColor": "#F6D7B0" }
    };

    if (populationStyles[population]) {
        backgroundImage = populationStyles[population].background;
        tableHeaderColor = populationStyles[population].headerColor;
    }

    document.body.style.backgroundImage = `url('${backgroundImage}')`;
    document.body.style.backgroundSize = "cover";
    document.body.style.backgroundPosition = "center";
    document.body.style.backgroundRepeat = "no-repeat";
    document.body.style.backgroundAttachment = "fixed";

    document.documentElement.style.setProperty('--table-header-color', tableHeaderColor);
});
</script>

</head>
<body>

<div class="container">
    <h1>SNPs for Population: {{ region }}</h1>

    <p><strong>Showing {{ unique_snp_count }} Unique SNPs</strong> in <strong>{{ region }}</strong>.</p>

    <!-- 1️⃣ SNP Table (Now Appears First) -->
    <div class="snp-table-container">
        <h2>SNP Details</h2>
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>SNP Name</th>
                        <th>Chromosome</th>
                        <th>Position</th>
                        <th>P-Value</th>
                        <th>Sample Size</th>
                        <th>Mapped Genes</th>
                    </tr>
                </thead>
                <tbody>
                    {% for snp in snps %}
                        <tr>
                            <td>{{ snp.snp_name }}</td>
                            <td>{{ snp.chr_id }}</td>
                            <td>{{ snp.chr_pos }}</td>
                            <td>{{ snp.p_value if snp.p_value else 'N/A' }}</td>
                            <td>{{ snp.sample_size if snp.sample_size else 'N/A' }}</td>
                            <td>
                                {% if mapped_genes[snp.snp_name] %}
                                    <select onchange="window.location.href=this.value">
                                        <option value="">-- Select Gene --</option>
                                        {% for gene in mapped_genes[snp.snp_name] %}
                                            <option value="{{ url_for('gene_ontology', gene_name=gene) }}">{{ gene }}</option>
                                        {% endfor %}
                                    </select>
                                {% else %}
                                    No mapped genes
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <!-- 2️⃣ Summary Statistics (Now Below SNP Table) -->
    {% if region.lower() == "south asian" and summary_stats %}
        <div class="tajima-container">
            <h2>Tajima's D Summary Statistics</h2>
            <table>
                <tr><td><strong>Min:</strong></td><td>{{ summary_stats["min_tajimas_d"] }}</td></tr>
                <tr><td><strong>Max:</strong></td><td>{{ summary_stats["max_tajimas_d"] }}</td></tr>
                <tr><td><strong>Mean:</strong></td><td>{{ summary_stats["avg_tajimas_d"] }}</td></tr>
                <tr><td><strong>Median:</strong></td><td>{{ summary_stats["median_tajimas_d"] }}</td></tr>
                <tr><td><strong>Std Dev:</strong></td><td>{{ summary_stats["std_tajimas_d"] }}</td></tr>
            </table>
        </div>

        <!-- 3️⃣ Tajima's D Plot (Now After Summary Statistics) -->
        <div class="tajima-container">
            <h2>Tajima's D Plot</h2>
            <img src="{{ tajima_plot_url }}" alt="Tajima's D Plot">
        </div>
    {% endif %}

    <!-- 4️⃣ Nucleotide Diversity Plot -->
    {% if nucleotide_plot_url %}
        <div class="tajima-container">
            <h2>Nucleotide Diversity Plot</h2>
            <img src="{{ nucleotide_plot_url }}" alt="Nucleotide Diversity Plot">
        </div>
    {% endif %}

    <!-- ✅ Buttons Stay in the Same Position -->
    {% if download_url %}
        <a href="{{ download_url }}" class="download-button">Download Summary Statistics</a>
    {% endif %}

    <a href="{{ url_for('index') }}" class="back-button">Back to Search</a>
</div>

</body>
</html>

