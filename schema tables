CREATE TABLE SNPs (
    snp_id INTEGER PRIMARY KEY AUTOINCREMENT,  -- Unique identifier for SNP
    snp_name TEXT UNIQUE NOT NULL,             -- SNP Identifier (e.g., rs1234)
    chr_id TEXT NOT NULL,                      -- Chromosome number (e.g., "9", "10", "11")
    chr_pos INTEGER NOT NULL,                  -- Genomic position
    gene_id INTEGER,                           -- Links to a gene if available
    FOREIGN KEY (gene_id) REFERENCES Genes(gene_id) ON DELETE SET NULL
);

UPDATE SNPs
SET gene_id = (
    SELECT sg.gene_id
    FROM SNP_Gene sg
    WHERE SNPs.snp_id = sg.snp_id
)
WHERE gene_id IS NULL;


CREATE TABLE Genes (
    gene_id INTEGER PRIMARY KEY AUTOINCREMENT,
    gene_name TEXT UNIQUE NOT NULL
);

CREATE TABLE SNP_Gene (
    snp_id INTEGER,
    gene_id INTEGER,
    PRIMARY KEY (snp_id, gene_id),
    FOREIGN KEY (snp_id) REFERENCES SNPs(snp_id) ON DELETE CASCADE,
    FOREIGN KEY (gene_id) REFERENCES Genes(gene_id) ON DELETE CASCADE
);

CREATE TRIGGER auto_assign_gene_id
BEFORE INSERT ON SNPs
FOR EACH ROW
BEGIN
    UPDATE SNPs
    SET gene_id = (
        SELECT gene_id FROM SNP_Gene WHERE snp_id = NEW.snp_id
    )
    WHERE snp_id = NEW.snp_id;
END;


CREATE TABLE Ontology (
    ontology_id INTEGER PRIMARY KEY AUTOINCREMENT,
    gene_id INTEGER,
    gene_stable_id TEXT,
    description TEXT,
    gene_type TEXT,
    molecular_function TEXT,
    biological_process TEXT,
    cellular_component TEXT,
    FOREIGN KEY (gene_id) REFERENCES Genes (gene_id) ON DELETE CASCADE
);

CREATE TABLE tajimas_pjl (
    chromosome INTEGER,
    bin_start INTEGER,
    n_snps INTEGER,
    tajimas_d REAL
);
CREATE TABLE SNP_Population (
    population_id INTEGER PRIMARY KEY AUTOINCREMENT,
    snp_id INTEGER NOT NULL,
    population TEXT NOT NULL,
    sample_size TEXT NOT NULL,
    p_value REAL NOT NULL,
    region TEXT NOT NULL,
    FOREIGN KEY (snp_id) REFERENCES SNPs(snp_id)
);

CREATE TABLE Populations (
    pop_id INTEGER PRIMARY KEY AUTOINCREMENT,
    snp_id INTEGER NOT NULL,
    region TEXT NOT NULL,
    p_value REAL NOT NULL,
    sample_size TEXT,
    FOREIGN KEY (snp_id) REFERENCES SNPs(snp_id) ON DELETE CASCADE
);

UPDATE SNP_Population SET population = 'South Asian' WHERE population = 'South Asia';
UPDATE SNP_Population SET population = 'General Asian' WHERE population = 'General Asia';

UPDATE Populations 
SET region = 'South Asian' 
WHERE region IN ('South Asia', 'South asian', 'S. Asia');

CREATE TABLE tajimas_BEB (
    chromosome INTEGER,
    bin_start INTEGER,
    n_snps INTEGER,
    tajimas_d REAL
);



CREATE TRIGGER normalize_population_region
BEFORE INSERT ON Populations
FOR EACH ROW
BEGIN
    -- Normalize common inconsistencies in region names
    SELECT CASE
        WHEN NEW.region IN ('South Asia', 'South asia', 'S. Asia') THEN
            SET NEW.region = 'South Asian';
        WHEN NEW.region IN ('East Asia', 'E. Asia', 'Eastern Asia') THEN
            SET NEW.region = 'East Asian';
        WHEN NEW.region IN ('European', 'Europe') THEN
            SET NEW.region = 'European';
        WHEN NEW.region IN ('African', 'Africa') THEN
            SET NEW.region = 'African';
    END;
END;


CREATE TRIGGER normalize_snp_population
BEFORE INSERT ON SNP_Population
FOR EACH ROW
BEGIN
    -- Normalize common inconsistencies in population names
    SELECT CASE
        WHEN NEW.population IN ('South Asia', 'South asia', 'S. Asia') THEN
            SET NEW.population = 'South Asian';
        WHEN NEW.population = 'General Asia' THEN
            SET NEW.population = 'General Asian';
        WHEN NEW.population = 'East Asia' THEN
            SET NEW.population = 'East Asian';
    END;
END;
